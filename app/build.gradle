apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
def isNeedTinker = false
if (isNeedTinker) {
    apply plugin: 'com.tencent.tinker.patch'
    apply from: "../tinker.gradle"
//apply plugin: 'davis'
}
apply plugin: "io.objectbox"
// 引用自定义在外包的变量
def app_info = rootProject.ext.app_info


android {
    compileSdkVersion app_info.compileSdkVersion
    ndkVersion '21.4.7075529'
    defaultConfig {
        applicationId "com.test.util2"
        minSdkVersion app_info.minSdkVersion
        targetSdkVersion app_info.targetSdkVersion
        versionCode 1
        versionName "1.0"
        flavorDimensions "1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++11 -D__CORRECT_ISO_CPP_WCHAR_H_PROTO"
//            }
////            ndk {
////                // 指定apk需要兼容的构架, 如果只有armeabi-v7a 32位PCU架构手机安装时候会显示此安装包只有32位版本，未适配本机64位处理器
////                abiFilters "armeabi-v7a", "arm64-v8a"
////            }
//        }
        /*=========tinker start==========*/
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
        multiDexEnabled true
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        buildConfigField "String", "TINKER_ID", "\"${TINKER_ID}\""
        buildConfigField "String", "PLATFORM", "\"all\""

        dexOptions {
            jumboMode = true
        }
        /*=========tinker end==========*/
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }


    signingConfigs {
        signing {
            keyAlias 'test'
            keyPassword '123456'
            storeFile file('../keystore.jks')
            storePassword '123456'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java {
                if(!isNeedTinker){
                    exclude 'com/test/util/tinker/'
                }
            }
        }
        androidTest {
            java {
                if(!isNeedTinker){
                    exclude 'com/test/util/tinker/'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'IS_DEBUG', 'false'
            signingConfig signingConfigs.signing
            debuggable false
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
            signingConfig signingConfigs.signing
            debuggable true
        }
    }
    flavorDimensions "f1"
    productFlavors {

        product_1 {
            /* 完成 no */
            applicationId "com.test.product_1"
            versionCode 102
            versionName "1.0.2"
            dimension "f1"
            resValue "string", "app_name", "测试1"
            resValue "bool", "auto_updates", 'true'
        }

        product_2 {
            /* 完成 no */
            applicationId "com.test.product_2"
            versionCode 101
            versionName "1.0.1"
            dimension "f1"
            resValue "string", "app_name", "测试2"
            resValue "bool", "auto_updates", 'true'
        }

/*        hot_fix {
            *//* 完成 no *//*
            applicationId "com.test.hot_fix"
            versionCode 101
            versionName "1.0.1"
            dimension "f1"
            resValue "string", "app_name", "hot_fix"
            resValue "bool", "auto_updates", 'true'
        }*/
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def appInfo = "V" + variant.versionName + getAppInfo() + variant.name
            appInfo = appInfo.replaceAll("\"", "")
            buildConfigField('String', 'app_info', "\"" + appInfo + "\"")
            //   variant.getPackageApplication().outputDirectory = new File("app/product_1/all")

            /* File file = new File("apk_dir")
             if (!file.exists()) {
                 file.mkdirs()
             }*/
            // println("cur path: " + file.getAbsolutePath() + "  exist:" + file.exists())
//            if (name.contains("Release")) {
//                variant.packageApplication.outputDirectory = file
//            }
            // def cur_time = new Date().format('yy年MM月dd日HH时mm分ss秒')
            // 以打包方式生成的apk位于app/productFlavors/xx.apk
            outputFileName = "V" + variant.versionName + "-" + variant.name + ".apk"
        }
    }
}

static def getAppInfo() {
    return getLastCommitInfo() + new Date().format('yy年MM月dd日HH时mm分ss秒')
}

static def getLastCommitInfo() {
    def p1 = 'git i -1 --pretty=format:"%h-%ci"'.execute()
    String logInfo = getGitInfo(p1)
    def p2 = 'git symbolic-ref --short HEAD'.execute()
    String currentBranch = getGitInfo(p2).trim()
    String info = "[git-" + currentBranch + "-" + logInfo + "]-"
    return info
}

static String getGitInfo(p1) {
    p1.waitFor()
    InputStream is = p1.getInputStream()
    String text = is.getText("utf-8").replace(":", "_").replace("+0800", "")
    is.close()
    text
}

dependencies {
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    compileOnly fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation 'junit:junit:4.13-rc-2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(':common')
    //provided 有错就替换为 compileOnly
    compileOnly 'de.robv.android.xposed:api:82'
    //如果需要引入文档，方便查看的话
    compileOnly 'de.robv.android.xposed:api:82:sources'
    // ViewModel和LiveData依赖
    implementation "android.arch.lifecycle:extensions:1.1.1"
    annotationProcessor "android.arch.lifecycle:compiler:1.1.1"
    implementation project(path: ':JPushExample')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    //implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'org.redisson:redisson:3.19.1'
    /*  tinker start  */
    if (isNeedTinker) {
        compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
        provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
        provided("com.tencent.tinker:tinker-android-anno-support:${TINKER_VERSION}") { changing = true }
    }

    compile "androidx.multidex:multidex:2.0.1"
    implementation 'com.github.princekin-f:EasyFloat:1.3.4'
    implementation "com.wireguard.android:tunnel:1.0.20211029"

// 协程核心库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
// 协程Android库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    /*  tinker end  */
}

/*
自定义gradle插件 方式1
*/
//apply plugin: testPluginLp

/*
// 自定义gradle插件 方式2 buildSrc module
插件名（‘test-plugin-lp’）即文件'test-plugin-lp.properties' 文件名
*/
//apply plugin: 'test-plugin-lp'
//
//class testPluginLp implements Plugin<Project>{
//
//    @Override
//    void apply(Project target) {
//        def tasks = target.getTasks()
//        for(def task: tasks){
//            println(" LLpp taskName:" + task.getName())
//        }
//        target.getParent()
//        println("自定义插件方式一：内置式self：" + target.getPath() + " parent:" + target.getParent().toString())
//    }
//}

