Okhttp:基本使用流程：
    1.new OkHttpClient.Builder()对象，通过该Builder对象构建出OkHttpClient对象
        OkHttpClient.Builder()对象的作用
            1.设置拦截器
            2.Cookie策略，
            3.设置请求超时
            4.自定义连接池等


    2.通过new Request.Builder()对象构建出Request对象
        Request.Builder()对象的作用：
        1.设置请求路径
        2.设置请求方式：get或者Post
        3.设置请求投
        4.设置请求参数
    3.通过OkHttpClient对象创建Call对象
    4.通过Call对象执行同步（execute）或者异步（enqueue）请求
    5.执行系列拦截器最终得到Response对象


okhttp的主要拦截器：
    1. RetryAndFollowUpInterceptor（负责失败重试，重定向的）
    2. BridgeInterceptor(把用户构造的请求信息转换为正式的请求报文、把服务器返回的响应报文封装成Response对象， gzip压缩)
    3. CacheInterceptor(保存读取缓存，缓存失效判断，一些静态资源是不需要多次重复请求的)...
    4. ConnectInterceptor(获取一个RealConnection对象，然后创建Socket链接，封装地址信息)
    5. 调用用户自定义的Interceptors
    6. CallServerInterceptor:负责向服务器发送请求数据、从服务器读取响应数据的


okhttp缓存：
    1.key 为 Request的 url 的 MD5 值，value 为response

1.1、简单说一下okhttp。
    1、支持SPDY、HTTP2.0
    2、无缝支持GZIP来减少数据流量
    3、支持同步（call.execute()）、异步（异步使用较多，call.enqueue()）
    4、缓存响应数据来减少重复的网络请求
    5、可以从很多常用的连接问题中自动恢复

1.2、Okhttp的核心类有哪些？简单讲一下
    Dispatcher 类：
    Interceptor 类：

1.3、OkHttp方面的其他面试题
    1、如何使用OkHttp进行异步网络请求，并根据请求结果刷新UI
    2、可否介绍一下OkHttp的整个异步请求流程
    3、OkHttp对于网络请求都有哪些优化，如何实现的
    4、OkHttp框架中都用到了哪些设计模式

SPDY：
    这是谷歌开发的一种互联网协议。它是一种HTTP的兼容协议、
    支持多路复用请求、
    对请求划分优先级（优先返回文字，图片音频等随后返回）、
    压缩HTTP头，以减少请求数据量。

多路复用：
    1.能否多路复用的条件：1.dns  2.Authenticator对象协议  3.CA授权验证标准  4.端口等是否相同  5.请求的http协议版本等

HTTP2.0：
    是在SPDY的基础上开发而来的，那么既然有了SPDY，为什么还要开发HTTP2.0。这是因为SPDY是完全由谷歌公司开发，这么重要的
    网络协议被把持在一家公司手里显然是不合适的。所以IETF（国际互联网工程任务组 The Internet Engineering Task Force，简称 IETF）就重新开
    发了HTTP2.0。HTTP2.0在SPDY的基础上又添加了更安全的SSL协议

网络请求需要面对的问题：
    01. DNS劫持。即使我们现在几万用户的小体量app，每月也能碰到几起DNS劫持。除了DNS劫持，这部分还需要考虑IP选取策略、DNS缓存、容灾等问题
    02. 连接复用。http基于TCP，所以连接要经历三次握手，关闭连接要经历4次握手，TCP连接在发送数据的时候，在起初会限制连接速度，随着传输的成功和时间的推移逐渐提高速度（防拥塞）
    03. I/O问题。客户端会等待服务器的返回数据，数据收到后从内核copy到用户空间，期间根据网络的阻塞模型（基本有五种，常见的有阻塞I/O、非阻塞I/O、多路复用I/O），会遇到不同程度的阻塞
    04. 如果项目网络库比较乱，使用线程也不太注意，线程过多，超过500个，在一些华为手机上会因为申请不到线程而崩溃...
    05. khttp对网络失败做了处理，但是说到针对弱网的优化，还是要去翻看mars

DNS：
    默认DNS服务问题：
    1. 不稳定DNS 劫持或者故障，导致服务不可用。
    2. LocalDNS 调度，并不一定是就近原则,网络可能会跨域导致访问缓慢：例如：用户侧是移动运营商，调度到了电信的 IP，造成访问慢
    3.不及时，运营商可能会修改 DNS 的 TTL(Time-To-Live，DNS 缓存时间)，导致 DNS 的修改，延迟生效。
