性能优化：
1.启动优化（主要是冷启动）
2.内存优化
3.绘制优化
4.安装包体积优化等

1. 启动优化：
    01.冷启动，从为app创建新进程启动：耗时操作开子线程执行.
    02.热启动，进程还没有被消耗，不会重建Application，只会重新绘制UI等相关流程。
    03. 启动时间统计命令： adb shell am start -W [packageName]/[packageName.XxxActivity]

2. 内存优化
    01.内存泄露：当需要被回收的对象无法回收即造成内存泄漏,比如耗时任务引用了context对象，匿名内部内的声明周期长于外部类等
    02.内存空间占用过大：
      1.尽量不使用多进程
      2.尽量不使用依赖注入框架
      3.不适用常驻服务。 合理的定义对象实体类，节省内存使用
      4. 使用SparseArray和ArrayMap代替HashMap
    03.内存抖动：占用的内存大小不稳定变化大，不要频繁创建大量对象
    04.内存溢出

    05. 获取内存使用情况：
        01. ActivityManager.getMemoryClass（）方法可获取当前应用可用的内存大小
        02.onTrimMemory()获取内存紧张级别
    06. 内存使用分析：
       1. MAT(Memory Analysis Tools) ： 一个Eclipse的 Java Heap 内存分析工具
       2. Heap Viewer ： Java Heap 内存分析工具
       3. Allocation Tracker ： 一个内存追踪分析工具
       4. Android Studio 的 Memory Monitor
       5. LeakCanary

    07.进程优先级：
        1.前台进程
        2.可见进程
        3.服务进程
        4.后台进程
        5.空进程
        ActivityManagerService 对所有进程进行评分（评分存放在变量adj中）,更新评分到Linux 内核由Linux内核完成真正的内存回收

3.绘制优化：
    1. onDraw（）中不要创建新的局部对象
    2. 避免onDraw（）执行大量 & 耗时操作
    3. 减少过度绘制（Overdraw），不允许 3 次以上的过度绘制（淡红色）面积 超过 屏幕大小的 1/4
      优化： 1. 移除默认的Window背景：<item name="android:windowBackground">@null</item> 或 getWindow().setBackgroundDrawable(null);
            2. 移除控件中不必要的背景
            3. 减少布局文件的层级（嵌套）
            4. 自定义控件View优化： clipRect() 、 quickReject()，
               clipRect(): 设置一个裁剪区域，只有在该区域内才会被绘制，区域之外的都不绘制
               quickreject(): 判断和某个矩形相交,若判断与矩形相交，则可跳过相交的区域，从而减少过度绘制
            5. 其他方案：openGL, 使用语言render javascript
   4. 工具: 1.Hierarchy Viewer, 2.Profile GPU Rendering,  3.Systrace


4.安装包优化：
    1.使用xml代替图片资源
    2.使用webp图片:目前WEBP与JPG相比较，编码速度慢10倍，解码速度慢1.5倍，但是由于减少了文件体积，缩短了加载的时间，实际上文件的渲染速度反而变快了
    3.svg矢量图。其实是图片的描述文件，牺牲CPU的计算能力的，节省空间。适用于简单的图标
    4.资源文件混淆：微信开源的AndResGuard资源混淆工具,将冗长的资源路径变短
    5.去除不用so文件
    6.资源动态加载，将一些不必要资源放入网络中，等需要时再下载缓存
    7.移除无用资源,使用Lint工具检测无用的资源，然后移除掉。
    8.代码混淆
